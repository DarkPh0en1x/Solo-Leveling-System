import Dexie, { Table } from 'dexie';
import toast from 'react-hot-toast';

// ===== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü =====

// –°–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞
export interface FocusSession {
  id?: number;
  start: number;
  end: number;
  minutes: number;
  activityType: string;
  skillId?: string;
  expGranted: number;
}

// –õ–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)
export interface LogEntry {
  id?: number;
  type: 'EXP' | 'LEVEL_UP' | 'SKILL_UP' | 'STAT_UP' | 'WILLPOWER' | 'ENDURANCE' | 'QUEST';
  title: string;
  message: string;
  timestamp: number;
}

// ===== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö =====
export class SoloLevelingDB extends Dexie {
  sessions!: Table<FocusSession, number>;
  logs!: Table<LogEntry, number>; // üÜï –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞

  constructor() {
    super('SoloLevelingDB');

    this.version(1).stores({
      sessions: '++id, start, end',
      logs: '++id, type, timestamp', // –¥–æ–±–∞–≤–∏–ª–∏ –∂—É—Ä–Ω–∞–ª
    });
  }
}

// ===== –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã =====
export const db = new SoloLevelingDB();

// ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ =====

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é
export async function saveSession(session: FocusSession) {
  try {
    await db.sessions.add(session);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', err);
  }
}

// üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
export async function logEvent(entry: Omit<LogEntry, 'timestamp'>) {
  try {
    const data = { ...entry, timestamp: Date.now() };
    await db.logs.add(data);

    // üü£ –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    toast.custom((t) => (
      <div
        className={`${
          t.visible ? 'animate-enter' : 'animate-leave'
        } bg-[#0f0f10] border border-indigo-700/60 text-gray-200 px-4 py-2 rounded-lg shadow-md`}
      >
        <p className="font-semibold text-indigo-400">{entry.title}</p>
        {entry.message && <p className="text-gray-400 text-sm">{entry.message}</p>}
      </div>
    ));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∂—É—Ä–Ω–∞–ª:', err);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∂—É—Ä–Ω–∞–ª–∞ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏)
export async function getLogs(): Promise<LogEntry[]> {
  return db.logs.orderBy('timestamp').reverse().toArray();
}
