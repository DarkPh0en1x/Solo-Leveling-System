import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { 
  calculateSkillRequired, 
  calculateStatRequired, 
  calculateRequiredExp, 
  calculateSessionExp 
} from '../utils/formulas';

// === –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Solo Leveling System (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞) ===

// ===== –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã) =====
export type StatKey = 'STR' | 'INT' | 'WIS' | 'CHA' | 'AGI';

// ====== –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ ======
export interface Stat {
  level: number;
  xp: number;
  required: number;
}

// ====== –ù–∞–≤—ã–∫–∏ ======
export interface Skill {
  id: string;
  name: string;
  level: number;
  xp: number;
  required: number;
  affinityStats: Record<StatKey, number>; // –∫–∞–∫–∏–µ —Å—Ç–∞—Ç—ã —Ä–∞–∑–≤–∏–≤–∞–µ—Ç
  enduranceType: 'mental' | 'physical'; // üÜï —Ç–∏–ø –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤—ã–∫–∞ (–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è)
}

// ====== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–ª—ã –≤–æ–ª–∏ / –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ ======
export interface AutoParam {
  level: number;
  progress: number;
}

// ====== –°–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞ ======
export interface Session {
  id: string;
  start: number;
  end: number;
  minutes: number;
  activityType: string;
  skillId?: string;
  expGranted: number;
}

// ====== –ö–≤–µ—Å—Ç—ã ======
export type QuestType = 'daily' | 'weekly' | 'story' | 'reactive';
export type QuestStatus = 'open' | 'done' | 'failed';

export interface Quest {
  id: string;
  title: string;
  description: string;
  type: QuestType;
  skillId?: string;
  plannedMinutes?: number;
  createdAt: number;
  deadline?: number;
  status: QuestStatus;
  completedAt?: number;

  // üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (–≤ –¥–µ–Ω—å–≥–∞—Ö)
  reward?: number;
}


// ====== –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ======
export interface Achievement {
  id: string;
  icon: string;
  title: string;
  description: string;
  hidden: boolean;
  progress: number;
  achievedAt?: number;
}

// ====== –ú–∞–≥–∞–∑–∏–Ω ======
export interface ShopItem {
  id: string;
  name: string;
  price: number;
  description: string;
  tags?: string[];
  active: boolean;
}

export interface Purchase {
  id: string;
  itemId: string;
  nameSnapshot: string;
  price: number;
  purchasedAt: number;
}


// ====== –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å ======
export type ItemType = 'artifact' | 'cosmetic' | 'tool' | 'note';

export interface Item {
  id: string;
  name: string;
  type: ItemType;
  description: string;
  tags: string[];
  pinned: boolean;
  equipped: boolean;
}

// ====== –ü—Å–∏—Ö–æ—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ======
export type Mood = 'neutral' | 'focused' | 'tired' | 'motivated' | 'low';

export interface MindBodyDay {
  date: string;
  mood: Mood;
  fatigue: number;
  wellbeing: number;
  motivation: number;
  focusScore: number;
}

// ====== –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
export interface UserState {
  level: number;
  exp: number;
  requiredExp: number;
  freePoints: number;
  stats: Record<StatKey, Stat>;
  skills: Skill[];

  // –ü—Å–∏—Ö–æ—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  willpower: AutoParam;
  mentalEndurance: AutoParam;
  physicalEndurance: AutoParam;

  streak: number;
  bestStreak: number;
  activeTitleId?: string;
  // üí∞ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
  money: number;
  // üõí –ú–∞–≥–∞–∑–∏–Ω
  shopItems: ShopItem[];
  purchases: Purchase[];
}

// =============================
// === Zustand store –Ω–∞—á–∞–ª–æ ===
// =============================

export const useAppStore = create<UserState>()(
  persist(
    (set, get) => ({
      // üß© –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      level: 1,
      exp: 0,
      requiredExp: 100,
      freePoints: 0,

      stats: {
  STR: { level: 1, xp: 0, required: 100 },
  INT: { level: 1, xp: 0, required: 100 },
  WIS: { level: 1, xp: 0, required: 100 },
  CHA: { level: 1, xp: 0, required: 100 },
  AGI: { level: 1, xp: 0, required: 100 },
},

skills: [],
// üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
willpower: { level: 1, progress: 0, required: 100 },
mentalEndurance: { level: 1, progress: 0, required: 100 },
physicalEndurance: { level: 1, progress: 0, required: 100 },
      streak: 0,
      bestStreak: 0,

      // ‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É
      addExp(expGain: number) {
        const { exp, level, requiredExp } = get();
        let totalExp = exp + expGain;
        let newLevel = level;
        let newRequired = requiredExp;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ø —É—Ä–æ–≤–Ω—è
        while (totalExp >= newRequired) {
  totalExp -= newRequired;
  newLevel++;

  // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥: +100 XP –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
  newRequired = 100 + (newLevel - 1) * 100;

  get().addFreePoints(5);
  console.log(`LEVEL UP ‚Üí ${newLevel}, Next required XP: ${newRequired}`);
}

        set({ exp: totalExp, level: newLevel, requiredExp: newRequired });
		get().recordDailyProgress(); // üß© —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å
      },

      // ‚öôÔ∏è –ù–∞—á–∏—Å–ª–∏—Ç—å –æ–ø—ã—Ç –∑–∞ –∫–≤–µ—Å—Ç
      addQuestExp(skillId: string | null, minutes: number, weight: number) {
        const exp = Math.round(minutes * weight);
        get().addExp(exp);
        if (skillId) get().grantSkillXp(skillId, exp);
        console.log(`Quest Completed ‚Üí +${exp} EXP`);
      },

// === –ö–æ–Ω–µ—Ü –ß–ê–°–¢–ò 1 ===
      // ‚öôÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ XP –Ω–∞–≤—ã–∫—É + —Å–≤—è–∑–∞–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
grantSkillXp(skillId: string, gainedXp: number) {
  const {
    skills,
    stats,
    addExp,
  } = get();

  const skill = skills.find((s) => s.id === skillId);
  if (!skill) return;

  let xp = skill.xp + gainedXp;
  let level = skill.level;
  let required = skill.required;

  // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–∞
  while (xp >= required) {
  xp -= required;
  level++;

  // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥: +50 XP –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
  required = 100 + (level - 1) * 50;

  console.log(`SKILL LEVEL UP ‚Üí ${skill.name} ‚Üí ${level}, Next required XP: ${required}`);
  }

  // üí° –ü—Ä–æ–∫–∞—á–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const newStats = { ...stats };
  const minutes = Math.max(gainedXp / 1.0, 1); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
  Object.entries(skill.affinityStats || {}).forEach(([statKey, weight]) => {
    if (weight > 0) {
      const gain = minutes * 0.5 * weight; // 0.5 XP –≤ –º–∏–Ω—É—Ç—É —Å —É—á—ë—Ç–æ–º –≤–µ—Å–∞
      const st = newStats[statKey as keyof typeof stats];
      if (st) {
        let statXp = st.xp + gain;
        let statLvl = st.level;
        let statReq = st.required;
        while (statXp >= statReq) {
          statXp -= statReq;
          statLvl++;
          statReq = calculateStatRequired(statLvl);
          console.log(`STAT LEVEL UP ‚Üí ${statKey} (${statLvl})`);
        }
        newStats[statKey as keyof typeof stats] = {
          ...st,
          xp: statXp,
          level: statLvl,
          required: statReq,
        };
      }
    }
  });
  set({ stats: newStats });

  // üìà –ß–∞—Å—Ç—å –æ–ø—ã—Ç–∞ –Ω–∞–≤—ã–∫–∞ –∏–¥—ë—Ç –≤ –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  addExp(gainedXp * 0.3);

  // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º –Ω–∞–≤—ã–∫
  const updatedSkills = skills.map((s) =>
    s.id === skillId ? { ...s, xp, level, required } : s
  );
  set({ skills: updatedSkills });
},



      // ‚öôÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏)
      grantFullExp(skillId: string | null, minutes: number, weight: number) {
        const exp = Math.round(minutes * weight);
        get().addExp(exp);
        if (skillId) get().grantSkillXp(skillId, exp);
        console.log(`EXP +${exp} (${skillId ?? '–æ–±—â–∏–π'})`);
      },

      // üß© –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ –≤—Ä—É—á–Ω—É—é
      addSkill(newSkill: Skill) {
        const { skills } = get();

        if (skills.find((s) => s.id === newSkill.id)) {
          alert('–ù–∞–≤—ã–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
          return;
        }

        const updated = [...skills, newSkill];
        set({ skills: updated });
        console.log(`Skill Created ‚Üí ${newSkill.name}`);
      },

      // üß© –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—á–∫–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ –∞–ø–∞ —É—Ä–æ–≤–Ω—è)
      addFreePoints(amount: number) {
        const { freePoints } = get();
        set({ freePoints: freePoints + amount });
      },

      // üß© –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –æ–¥–Ω–æ –æ—á–∫–æ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≤—Ä—É—á–Ω—É—é
      increaseStat(statKey: StatKey) {
        const { stats, freePoints } = get();
        if (freePoints <= 0) return;

        const st = stats[statKey];
        if (!st) return;

        const newStats = { ...stats };
        newStats[statKey] = {
          level: st.level + 1,
          xp: 0,
          required: calculateStatRequired(st.level + 1),
        };

        set({
          stats: newStats,
          freePoints: freePoints - 1,
        });

        console.log(`MANUAL STAT UP ‚Üí ${statKey} (${newStats[statKey].level})`);
      },

      // ‚öôÔ∏è –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (Willpower/Endurance)
      resetDailyStats() {
        const { endurance, willpower } = get();
        set({
          endurance: { ...endurance, progress: 0 },
          willpower: { ...willpower, progress: 0 },
        });
        console.log('Daily stats reset.');
      },

      // üßò‚Äç‚ôÇÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—Ç–∞–ª—å–Ω—É—é –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
addMentalEndurance(minutes: number) {
  const { mentalEndurance } = get();
  const gain = minutes * 0.5; // 0.5 XP –∑–∞ –º–∏–Ω—É—Ç—É
  let { level, progress, required } = mentalEndurance;

  progress += gain;

  while (progress >= required) {
    progress -= required;
    level++;
    required = 100 + (level - 1) * 50; // —Ä–∞—Å—Ç—ë—Ç –Ω–∞ +50 XP –∑–∞ —É—Ä–æ–≤–µ–Ω—å
  }

  set({ mentalEndurance: { level, progress, required } });

  if (gain > 0) {
    console.log(`üßò‚Äç‚ôÇÔ∏è MENTAL ENDURANCE +${gain.toFixed(1)} XP ‚Üí Lv.${level} (${progress.toFixed(1)}/${required})`);
  }

  get().recordDailyProgress();
},




// üí™ –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
addPhysicalEndurance(minutes: number) {
  const { physicalEndurance } = get();
  const gain = minutes * 0.5; // 0.5 XP –∑–∞ –º–∏–Ω—É—Ç—É
  let { level, progress, required } = physicalEndurance;

  progress += gain;

  while (progress >= required) {
    progress -= required;
    level++;
    required = 100 + (level - 1) * 50;
  }

  set({ physicalEndurance: { level, progress, required } });

  if (gain > 0) {
    console.log(`üí™ PHYSICAL ENDURANCE +${gain.toFixed(1)} XP ‚Üí Lv.${level} (${progress.toFixed(1)}/${required})`);
  }

  get().recordDailyProgress();
},




// üî• –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–ª—É –≤–æ–ª–∏
addWillpower(minutes: number) {
  const { willpower } = get();
  const gain = minutes * 0.5; // 0.5 XP –∑–∞ –º–∏–Ω—É—Ç—É
  let { level, progress, required } = willpower;

  progress += gain;

  while (progress >= required) {
    progress -= required;
    level++;
    required = 100 + (level - 1) * 50;
  }

  set({ willpower: { level, progress, required } });

  if (gain > 0) {
    console.log(`üî• WILLPOWER +${gain.toFixed(1)} XP ‚Üí Lv.${level} (${progress.toFixed(1)}/${required})`);
  }

  if (typeof get().recordDailyProgress === 'function') {
    get().recordDailyProgress();
  }
},


// === –ö–æ–Ω–µ—Ü –ß–ê–°–¢–ò 2 ===
      // üßæ –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞—Ç–æ–≤ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, –≥—Ä–∞—Ñ–∏–∫–æ–≤)
      getTotalStats() {
        const { stats } = get();
        return Object.entries(stats).reduce(
          (acc, [key, st]) => ({ ...acc, [key]: st.level }),
          {}
        );
      },

      // üìä –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
      getTotalSkillLevels() {
        const { skills } = get();
        return skills.reduce((acc, s) => acc + s.level, 0);
      },

      // üìà –û–±—â–∏–π EXP –∏–∑ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
      getTotalSkillExp() {
        const { skills } = get();
        return skills.reduce((acc, s) => acc + s.xp, 0);
      },
	  
	  
	  achievements: [], // üèÜ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ undefined

addAchievement(newAchievement: Achievement) {
  const { achievements } = get();
  set({ achievements: [...achievements, newAchievement] });
  console.log(`Achievement added ‚Üí ${newAchievement.title}`);
},

completeAchievement(id: string) {
  const { achievements } = get();
  const updated = achievements.map((a) =>
    a.id === id ? { ...a, progress: 100, achievedAt: Date.now() } : a
  );
  set({ achievements: updated });
  console.log(`Achievement completed ‚Üí ${id}`);
},
	  
	  quests: [], // üü¢ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ undefined

addQuest(newQuest: Quest) {
  const { quests } = get();
  set({ quests: [...quests, newQuest] });
  console.log(`Quest Created ‚Üí ${newQuest.title}`);
},

// üí∞ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
money: 0,

// üí∏ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏
addMoney(amount: number) {
  const { money } = get();
  const safeAmount = isNaN(amount) ? 0 : amount;
  const safeMoney = isNaN(money) ? 0 : money;
  set({ money: safeMoney + safeAmount });
  console.log(`Money +${safeAmount} ‚Üí ${safeMoney + safeAmount}`);
  get().recordDailyProgress(); // üß© —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å
},

// üí∏ –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏
spendMoney(amount: number) {
  const { money } = get();
  const safeMoney = isNaN(money) ? 0 : money;
  const safeAmount = isNaN(amount) ? 0 : amount;

  if (safeMoney < safeAmount) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
    return;
  }

  set({ money: safeMoney - safeAmount });
  console.log(`Money -${safeAmount} ‚Üí ${safeMoney - safeAmount}`);
  get().recordDailyProgress(); // üß© —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å
},

// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–µ–Ω–µ–≥
completeQuest(id: string) {
  const { quests, addMoney } = get();
  const updated = quests.map((q) => {
    if (q.id === id && q.status !== 'done') {
      if (q.reward) addMoney(q.reward); // –Ω–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∑–∞ –∫–≤–µ—Å—Ç
      return { ...q, status: 'done', completedAt: Date.now() };
    }
    return q;
  });
  set({ quests: updated });
  console.log(`Quest Completed ‚Üí ${id}`);
},



// === üõí –ú–∞–≥–∞–∑–∏–Ω ===

// üì¶ –ù–∞—á–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
shopItems: [],
purchases: [],

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
addShopItem(item: ShopItem) {
  const { shopItems } = get();
  if (shopItems.find((i) => i.id === item.id)) {
    alert('–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    return;
  }
  set({ shopItems: [...shopItems, item] });
  console.log(`Shop Item Added ‚Üí ${item.name}`);
},

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
updateShopItem(id: string, patch: Partial<ShopItem>) {
  const { shopItems } = get();
  const updated = shopItems.map((i) => (i.id === id ? { ...i, ...patch } : i));
  set({ shopItems: updated });
  console.log(`Shop Item Updated ‚Üí ${id}`);
},

// ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
deleteShopItem(id: string) {
  const { shopItems } = get();
  set({ shopItems: shopItems.filter((i) => i.id !== id) });
  console.log(`Shop Item Deleted ‚Üí ${id}`);
},

// üí∏ –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
buyItem(itemId: string) {
  const { shopItems, money, spendMoney } = get();
  const item = shopItems.find((i) => i.id === itemId && i.active);
  if (!item) {
    alert('–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    return;
  }
  if (money < item.price) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
    return;
  }

  spendMoney(item.price);
  const purchase: Purchase = {
    id: Date.now().toString(),
    itemId: item.id,
    nameSnapshot: item.name,
    price: item.price,
    purchasedAt: Date.now(),
  };

  set({ purchases: [...get().purchases, purchase] });
  console.log(`Item Purchased ‚Üí ${item.name} –∑–∞ ${item.price}`);
},

// === üß† –°–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞ ===
sessions: [],

addSession(newSession: Session) {
  const { sessions } = get();
  set({ sessions: [...sessions, newSession] });
  console.log(`üß© Focus session recorded ‚Üí ${newSession.minutes} –º–∏–Ω (${newSession.activityType})`);
},


// === ‚è±Ô∏è –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è ===
isFocusRunning: false,
focusSeconds: 0,
focusActivity: 'study',
focusSkillId: null,

startFocus() {
  set({ isFocusRunning: true });
},

pauseFocus() {
  set({ isFocusRunning: false });
},

stopFocus() {
  const state = get();
  const {
    focusSeconds,
    focusActivity,
    focusSkillId,
    addSession,
    addExp,
    grantSkillXp,
    addWillpower,
    addMentalEndurance,
    addPhysicalEndurance,
  } = state;

  if (focusSeconds <= 0) {
    set({ isFocusRunning: false, focusSeconds: 0 });
    return;
  }

  const minutes = Math.floor(focusSeconds / 60);
  const weight =
    focusActivity === 'practice' ? 1.2 :
    focusActivity === 'review' ? 0.8 : 1.0;

  const exp = calculateSessionExp(minutes, weight);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
  addSession({
    id: Date.now().toString(),
    start: new Date().toISOString(),
    end: new Date().toISOString(),
    minutes,
    activityType: focusActivity,
    skillId: focusSkillId ?? undefined,
    expGranted: exp,
  });

  // –û–±—â–∏–π –æ–ø—ã—Ç
  addExp(exp);

  // –ù–∞–≤—ã–∫ + —Å—Ç–∞—Ç—ã
  if (focusSkillId && typeof grantSkillXp === 'function') {
    grantSkillXp(focusSkillId, exp);
    const skill = get().skills.find((s) => s.id === focusSkillId);
    if (skill) {
      if (skill.enduranceType === 'mental') addMentalEndurance(minutes);
      else addPhysicalEndurance(minutes);
    }
  }

  // –í—Å–µ–≥–¥–∞ —Ä–∞—Å—Ç—ë—Ç —Å–∏–ª–∞ –≤–æ–ª–∏
  addWillpower(minutes);

  set({ isFocusRunning: false, focusSeconds: 0 });
  console.log(`üéØ Focus stopped ‚Üí +${exp} EXP (${minutes} –º–∏–Ω)`);
},


tickFocus() {
  const { isFocusRunning, focusSeconds } = get();
  if (isFocusRunning) set({ focusSeconds: focusSeconds + 1 });
},

setFocusActivity(activity: string) {
  set({ focusActivity: activity });
},

setFocusSkill(id: string | null) {
  set({ focusSkillId: id });
},





// ====== –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —Ç–∏—Ç—É–ª—ã ======
inventory: [],
titles: [],
activeTitleId: undefined,

addItem(newItem: Item) {
  const { inventory } = get();
  set({ inventory: [...inventory, newItem] });
  console.log(`Item added ‚Üí ${newItem.name}`);
},

addTitle(newTitle: { id: string; name: string; description: string }) {
  const { titles } = get();
  set({ titles: [...titles, newTitle] });
  console.log(`Title added ‚Üí ${newTitle.name}`);
},

setActiveTitle(id: string) {
  set({ activeTitleId: id });
  console.log(`Active title set ‚Üí ${id}`);
},

mindBodyDays: [], // üßò‚Äç‚ôÇÔ∏è —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ undefined

addMindBodyEntry(newEntry: MindBodyDay) {
  const { mindBodyDays } = get();
  set({ mindBodyDays: [...mindBodyDays, newEntry] });
  console.log(`MindBody entry added ‚Üí ${newEntry.date}`);
},

updateMindBodyEntry(date: string, data: Partial<MindBodyDay>) {
  const { mindBodyDays } = get();
  const updated = mindBodyDays.map((d) =>
    d.date === date ? { ...d, ...data } : d
  );
  set({ mindBodyDays: updated });
  console.log(`MindBody entry updated ‚Üí ${date}`);
},

// ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
config: {
  studyWeight: 1.0,
  practiceWeight: 1.0,
  reviewWeight: 1.0,
  expLevelPower: 1.2,
},

setConfig(newConfig: {
  studyWeight?: number;
  practiceWeight?: number;
  reviewWeight?: number;
  expLevelPower?: number;
}) {
  set({ config: { ...get().config, ...newConfig } });
  console.log('Config updated:', newConfig);
},

// üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
exportData() {
  try {
    const data = get();
    const json = JSON.stringify(data, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = `solo-leveling-data-${new Date()
      .toISOString()
      .slice(0, 10)}.json`;
    a.click();

    URL.revokeObjectURL(url);
    console.log('Data exported.');
  } catch (err) {
    console.error('Export error:', err);
  }
},

// üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
importData(data: Partial<UserState>) {
  try {
    // –°–ª–∏—è–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è)
    set({
      ...get(),
      ...data,
      config: { ...get().config, ...(data as any).config },
    });
    console.log('Data imported.');
  } catch (err) {
    console.error('Import error:', err);
  }
},

      // üìÜ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–∫–æ–≤
      updateStreak(success: boolean) {
        const { streak, bestStreak } = get();
        const newStreak = success ? streak + 1 : 0;
        const newBest = success && newStreak > bestStreak ? newStreak : bestStreak;
        set({ streak: newStreak, bestStreak: newBest });
        console.log(`Streak updated ‚Üí ${newStreak} (Best: ${newBest})`);
      },
	  // === üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤) ===
progressHistory: [],

// üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
recordDailyProgress() {
  const {
    progressHistory,
    exp,
    money,
    willpower,
    mentalEndurance,
    physicalEndurance,
  } = get();

  const today = new Date().toISOString().slice(0, 10);
  const existing = progressHistory.find((p) => p.date === today);

  const newEntry = {
    date: today,
    exp,
    money,
    willpower: willpower.level,
    mentalEndurance: mentalEndurance.level,
    physicalEndurance: physicalEndurance.level,
  };

  if (existing) {
    const updated = progressHistory.map((p) =>
      p.date === today ? newEntry : p
    );
    set({ progressHistory: updated });
  } else {
    set({ progressHistory: [...progressHistory, newEntry] });
  }

  console.log('üìä Daily progress recorded:', newEntry);
},
	  
    }),
	
    {
  name: 'solo-leveling-store', // —Ç–æ—Ç –∂–µ –∫–ª—é—á
  version: 3,
  migrate: (state: any, version) => {
    // –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–ª–æ—Å—å mindBody (–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–æ) ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    if (version < 2 && state) {
      if (state.mindBody) {
        return {
          ...state,
          mindBodyDays: state.mindBody,
        };
      }
    }

    // üÜï –ü–µ—Ä–µ–Ω–æ—Å endurance ‚Üí physicalEndurance
    if (version < 3 && state && state.endurance) {
      return {
        ...state,
        physicalEndurance: state.endurance,
        endurance: undefined,
      };
    }

    return state as any;
  }, // ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º migrate!
  partialize: (state) => ({
    level: state.level,
    exp: state.exp,
    requiredExp: state.requiredExp,
    freePoints: state.freePoints,
    stats: state.stats,
    skills: state.skills,
    willpower: state.willpower,
mentalEndurance: state.mentalEndurance,
physicalEndurance: state.physicalEndurance,
    streak: state.streak,
    bestStreak: state.bestStreak,
    activeTitleId: state.activeTitleId,
    quests: state.quests,
    achievements: state.achievements,
    inventory: state.inventory,
    titles: state.titles,
    config: state.config,
    // üëá –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ‚Äî —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–Ω–µ–≤–Ω–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    mindBodyDays: state.mindBodyDays,
	money: state.money,
	shopItems: state.shopItems,
	purchases: state.purchases,
	progressHistory: state.progressHistory,
  }),
}
  )
);
